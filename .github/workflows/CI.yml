name: CI solamente
on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4 # Download repository to the runner

      # 2. Set up JDK 8
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'adopt'
          server-id: github
          settings-path: ${{ github.workspace }} # Path for settings.xml file

      #### BUILDS ####
      # 3. Set up Gradle version 2.1
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 2.1

      # 4. Build the Frontend
      - name: Build Frontend
        working-directory: src/Clients
        run: ./gradlew build

      # 5. Upload frontend build artifacts (optional)
      - name: Upload Frontend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Clients
          path: src/Clients/build/libs

      # 6. Build and Test the Backend
      - name: Build and Test Backend
        working-directory: src/Backend/OrderService
        run: ./gradlew build test

      # Dockerización del frontend y backend
      - name: Dockerizar el frontend y el backend
        run: |
          # Copiar el archivo .war del frontend en la carpeta de despliegue para la nueva imagen
          cp src/Clients/build/libs/*.war deploy/docker/Clients/drop
          # Construir la imagen Docker para el frontend
          docker build -t p2gps/web deploy/docker/Clients
          
          # Copiar el archivo .jar del backend en la carpeta de despliegue para la nueva imagen
          cp src/Backend/OrderService/build/libs/ordering* deploy/docker/Order/drop
          # Construir la imagen Docker para el backend
          docker build -t p2gps/order deploy/docker/Order
      
      # Subir imágenes a DockerHub
      - name: Login a DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Crear los secretos en Settings -> Secrets/Actions/New Repository Secret
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Etiquetar imágenes en formato DockerHub
        run: |
          docker tag p2gps/web ${{ secrets.DOCKERHUB_USERNAME }}/p2gps:web
          docker tag p2gps/order ${{ secrets.DOCKERHUB_USERNAME }}/p2gps:order
      
      - name: Subir imágenes a DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/p2gps:web
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/p2gps:order
      
          # Dockerizar el frontend y el backend
      - name: Dockerizar el frontend y backend
        run: |
          # Copiar el resultado del build del frontend
          cp src/Clients/build/libs/*.war deploy/docker/Clients/drop
          # Construir la imagen Docker para el frontend
          docker build -t p2gps/web deploy/docker/Clients
      
          # Copiar el resultado del build del backend
          cp src/Backend/OrderService/build/libs/ordering* deploy/docker/Order/drop
          # Construir la imagen Docker para el backend
          docker build -t p2gps/order deploy/docker/Order
      
      # Subir imágenes a DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Crear los secretos en Settings -> Secrets/Actions/New Repository Secret
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Etiquetar imágenes con formato DockerHub
        run: |
          docker tag p2gps/web ${{ secrets.DOCKERHUB_USERNAME }}/p2gps:web
          docker tag p2gps/order ${{ secrets.DOCKERHUB_USERNAME }}/p2gps:order
      
      - name: Subir imágenes a DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/p2gps:order
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/p2gps:web
